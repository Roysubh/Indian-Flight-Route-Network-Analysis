# -*- coding: utf-8 -*-
"""Flight_Route_of_India.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C09aYxtz3MP-kjaW99v5JjdGRLDRjYc4
"""

!pip install cartopy

import os
import urllib.request
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
from shapely.geometry import LineString
import cartopy.crs as ccrs
import matplotlib.patches as mpatches
import numpy as np
import matplotlib.colors as mcolors
from pyproj import Geod
import matplotlib.animation as animation
import matplotlib.lines as mlines
from matplotlib.patches import FancyArrow

# Download and save Airport Data

# File path in Google Drive
airport_file = "/content/drive/MyDrive/Flight_Route_of_India/Airport/airports.dat"
airport_url = "https://raw.githubusercontent.com/jpatokal/openflights/master/data/airports.dat"

# Ensure directory exists
os.makedirs(os.path.dirname(airport_file), exist_ok=True)

# Download file
urllib.request.urlretrieve(airport_url, airport_file)

print("Download completed:", airport_file)

airports = pd.read_csv("/content/drive/MyDrive/Flight_Route_of_India/Airport/airports.dat", delimiter=',',
                       names=['id', 'name', 'city', 'country', 'iata',
                              'icao', 'lat', 'long', 'altitude', 'timezone',
                              'dst', 'tz', 'type', 'source'])
airports.head()

# ---- Filter Indian Airports ----
ind_airport = airports[(airports['country'] == 'India') & (airports['iata'] != '\\N')]

# Convert to GeoDataFrame (like st_as_sf in R)
ind_airport_sf = gpd.GeoDataFrame(
    ind_airport,
    geometry=gpd.points_from_xy(ind_airport["long"], ind_airport["lat"]),
    crs="EPSG:4326"
)

# Create a DataFrame with lon/lat columns (similar to mutate in R)
ind_airport_df = ind_airport.copy()
ind_airport_df["long"] = ind_airport_df["long"]
ind_airport_df["lat"] = ind_airport_df["lat"]

# Preview
print(ind_airport_sf.head())

# --- Plot map ---

IND_Boundary = gpd.read_file("/content/drive/MyDrive/Flight_Route_of_India/IND_Boundary/India_Boundary.shp")

fig, ax = plt.subplots(figsize=(12, 8))

ax.set_facecolor('black')  # Axes background

# Plot India boundary
IND_Boundary.plot(ax=ax, color='none', edgecolor='orange', linewidth=1)

# Plot Indian airports
ax.scatter(ind_airport['long'], ind_airport['lat'],
           s=20, color='blue', alpha=0.8, edgecolors='cyan')

# Add airport names in black font
for idx, row in ind_airport.iterrows():
    ax.text(row['long'], row['lat'], row['name'], fontsize=4, color='white', ha='left', va='bottom')

# Add legend
ax.scatter([], [], s=30, color='blue', edgecolors='cyan', label='Indian Airports')
ax.legend(loc='upper right', fontsize=12, facecolor='white', edgecolor='gray', title='Legend')

# Add gridlines for latitude and longitude
ax.grid(True, which='both', linestyle='--', color='gray', alpha=0.5, linewidth=0.5)

# Label axes
ax.set_xlabel("Longitude")
ax.set_ylabel("Latitude")

ax.set_title("Airports of India", fontsize=18)

# --- Step 5: Save figure ---
output_file = "/content/drive/MyDrive/Flight_Route_of_India/Airports of India.png"
plt.savefig(output_file, dpi=1200, bbox_inches='tight')

plt.show()

print(f"Map saved to: {output_file}")

# Download and save Airport Route Data

# File path in Google Drive
airport_route_file = "/content/drive/MyDrive/Flight_Route_of_India/Routes/routes.dat"
airport_route_url = "https://raw.githubusercontent.com/jpatokal/openflights/master/data/routes.dat"

# Ensure directory exists
os.makedirs(os.path.dirname(airport_route_file), exist_ok=True)

# Download file
urllib.request.urlretrieve(airport_route_url, airport_route_file)

print("Download completed:", airport_route_file)

routes = pd.read_csv("/content/drive/MyDrive/Flight_Route_of_India/Routes/routes.dat", delimiter=',', names=['airline', 'id', 'source_airport', 'source_airport_id',
                                                               'destination_airport', 'destination_airport_id', 'codeshare',
                                                               'stops', 'equitment'])
routes.head()

#-----Filter routes that involve Indian airports-----

ind_airports_iata = set(ind_airport['iata'])

ind_routes = routes[
    routes['source_airport'].isin(ind_airports_iata) |
    routes['destination_airport'].isin(ind_airports_iata)
]
print(ind_routes)

# Merge source airport coordinates
ind_routes = ind_routes.merge(
    ind_airport[['iata', 'lat', 'long']],
    left_on='source_airport',
    right_on='iata',
    how='left'
).rename(columns={'lat': 'source_lat', 'long': 'source_long'}).drop(columns=['iata'])

# Merge destination airport coordinates
ind_routes = ind_routes.merge(
    ind_airport[['iata', 'lat', 'long']],
    left_on='destination_airport',
    right_on='iata',
    how='left'
).rename(columns={'lat': 'dest_lat', 'long': 'dest_long'}).drop(columns=['iata'])

print(ind_routes.dtypes)
print(ind_routes.head())

# First, check for duplicate columns
ind_routes = ind_routes.loc[:, ~ind_routes.columns.duplicated()]

# Keep only the final coordinate columns you need
keep_cols = ['airline', 'source_airport', 'destination_airport',
             'source_lat', 'source_long', 'dest_lat', 'dest_long']
ind_routes_clean = ind_routes[keep_cols].copy()

# Convert coordinates to numeric
for col in ['source_lat', 'source_long', 'dest_lat', 'dest_long']:
    ind_routes_clean[col] = pd.to_numeric(ind_routes_clean[col], errors='coerce')

# Drop rows with missing coords
ind_routes_clean = ind_routes_clean.dropna(subset=['source_lat', 'source_long', 'dest_lat', 'dest_long'])

# Build GeoDataFrame

from shapely.geometry import LineString
import geopandas as gpd

ind_routes_clean['geometry'] = ind_routes_clean.apply(
    lambda row: LineString([(row['source_long'], row['source_lat']),
                            (row['dest_long'], row['dest_lat'])]), axis=1)

# Convert to GeoDataFrame
ind_routes_gdf = gpd.GeoDataFrame(ind_routes_clean, geometry='geometry', crs="EPSG:4326")

import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import matplotlib.colors as mcolors
import geopandas as gpd
from pyproj import Geod
from matplotlib.patches import FancyArrow

# --------------------- Custom Scale Bar Function ---------------------
def add_scale_bar(ax, length_km=500, location=(0.85, 0.05), linewidth=3, color='white'):
    """Add a simple scale bar to a cartopy axis."""
    lon0, lon1, lat0, lat1 = ax.get_extent(ccrs.PlateCarree())
    x_frac, y_frac = location
    lon_start = lon0 + (lon1 - lon0) * x_frac
    lat_start = lat0 + (lat1 - lat0) * y_frac

    # Draw scale bar line
    ax.plot([lon_start, lon_start + length_km / 111], [lat_start, lat_start],
            transform=ccrs.PlateCarree(), color=color, linewidth=linewidth)

    # Add text label
    ax.text(lon_start + (length_km / (2*111)), lat_start + 0.2,
            f"{length_km} km", transform=ccrs.PlateCarree(),
            color=color, fontsize=10)

# --------------------- North Arrow Function ---------------------
def add_north_arrow(ax, location=(0.95, 0.85), width=0.005, height=0.05, pad=0.02, color='white'):
    """Add a simple north arrow to a cartopy axis."""
    bbox = ax.get_position()
    ax_width = bbox.width
    ax_height = bbox.height
    ax_x = bbox.x0
    ax_y = bbox.y0

    x_frac, y_frac = location
    x_start = ax_x + ax_width * x_frac
    y_start = ax_y + ax_height * y_frac

    arrow = FancyArrow(
        x_start, y_start,
        0, ax_height * height,
        width=ax_width * width,
        head_width=ax_width * width * 2,
        head_length=ax_height * height / 2,
        transform=ax.figure.transFigure,
        color=color
    )
    ax.figure.patches.append(arrow)

    # Add "N" label
    ax.figure.text(x_start, y_start + ax_height * (height + pad), "N",
                   color=color, fontsize=12, fontweight="bold", ha="center")

# --------------------- Colors ---------------------
colors = list(mcolors.TABLEAU_COLORS.values())

# --------------------- Setup Figure ---------------------
fig, ax = plt.subplots(
    figsize=(16, 10),
    subplot_kw={'projection': ccrs.PlateCarree()},
    facecolor='black'
)
ax.set_facecolor('black')

# --------------------- India Boundary ---------------------
IND_Boundary = gpd.read_file("/content/drive/MyDrive/Flight_Route_of_India/IND_Boundary/India_Boundary.shp")
IND_Boundary.to_crs(epsg=4326).plot(
    ax=ax, edgecolor='white', facecolor='none', linewidth=1
)

# --------------------- Map Extent ---------------------
min_lon = min(ind_routes_clean['source_long'].min(),
              ind_routes_clean['dest_long'].min()) - 5
max_lon = max(ind_routes_clean['source_long'].max(),
              ind_routes_clean['dest_long'].max()) + 5
min_lat = min(ind_routes_clean['source_lat'].min(),
              ind_routes_clean['dest_lat'].min()) - 5
max_lat = max(ind_routes_clean['source_lat'].max(),
              ind_routes_clean['dest_lat'].max()) + 5

ax.set_extent([min_lon, max_lon, min_lat, max_lat], crs=ccrs.PlateCarree())

geod = Geod(ellps='WGS84')

groups = ind_routes_clean.groupby('airline')
for i, (airline, group) in enumerate(groups):
    color = colors[i % len(colors)]
    for _, row in group.iterrows():
        npts = 100
        points = geod.npts(
            row['source_long'], row['source_lat'],
            row['dest_long'], row['dest_lat'],
            npts
        )
        lons, lats = zip(*points)

        lons = [row['source_long']] + list(lons) + [row['dest_long']]
        lats = [row['source_lat']] + list(lats) + [row['dest_lat']]

        ax.plot(
            lons,
            lats,
            color=color,
            linewidth=0.6,
            alpha=0.7,
            transform=ccrs.Geodetic()
        )

    ax.plot([], [], color=color, linewidth=2, label=airline)

# --------------------- Plot Airports ---------------------
ind_airport_sf.plot(ax=ax, color='blue', markersize=10, edgecolor='cyan', label="Airports")

# --------------------- Gridlines ---------------------
gl = ax.gridlines(draw_labels=True, linestyle='--', color='gray', alpha=0.5, linewidth=0.8)
gl.top_labels = False
gl.right_labels = False
gl.xlabel_style = {'color': 'white'}
gl.ylabel_style = {'color': 'white'}

# --------------------- Title & Legend ---------------------
ax.set_title("Indian Flight Routes", fontsize=20, color='white')
ax.legend(loc='lower left', fontsize=7, facecolor='black', edgecolor='white', labelcolor='white')

# --------------------- Add Scale Bar & North Arrow ---------------------
add_scale_bar(ax, length_km=500, location=(0.85, 0.05))
add_north_arrow(ax, location=(0.95, 0.85))

# --------------------- Save & Show ---------------------
plt.savefig(
    "/content/drive/MyDrive/Flight_Route_of_India/Indian_Flight_Routes.png",
    dpi=1200, bbox_inches='tight', facecolor='black'
)
plt.show()

import matplotlib.pyplot as plt
import matplotlib.animation as animation
import cartopy.crs as ccrs
import matplotlib.colors as mcolors
import geopandas as gpd
from pyproj import Geod
import matplotlib.lines as mlines
from matplotlib.patches import FancyArrow

# --------------------- Custom Scale Bar Function ---------------------
def add_scale_bar(ax, length_km=500, location=(0.85, 0.05), linewidth=3, color='white'):
    """Add a simple scale bar to a cartopy axis."""
    lon0, lon1, lat0, lat1 = ax.get_extent(ccrs.PlateCarree())
    x_frac, y_frac = location
    lon_start = lon0 + (lon1 - lon0) * x_frac
    lat_start = lat0 + (lat1 - lat0) * y_frac

    # Draw scale bar line
    ax.plot([lon_start, lon_start + length_km / 111], [lat_start, lat_start],
            transform=ccrs.PlateCarree(), color=color, linewidth=linewidth)

    # Add text label
    ax.text(lon_start + (length_km / (2*111)), lat_start + 0.2,
            f"{length_km} km", transform=ccrs.PlateCarree(),
            color=color, fontsize=8)

# --------------------- North Arrow Function ---------------------
def add_north_arrow(ax, location=(0.95, 0.85), width=0.005, height=0.05, pad=0.02, color='white'):
    """Add a simple north arrow to a cartopy axis."""
    bbox = ax.get_position()
    ax_width = bbox.width
    ax_height = bbox.height
    ax_x = bbox.x0
    ax_y = bbox.y0

    x_frac, y_frac = location
    x_start = ax_x + ax_width * x_frac
    y_start = ax_y + ax_height * y_frac

    arrow = FancyArrow(
        x_start, y_start,
        0, ax_height * height,
        width=ax_width * width,
        head_width=ax_width * width * 2,
        head_length=ax_height * height / 2,
        transform=ax.figure.transFigure,
        color=color
    )
    ax.figure.patches.append(arrow)

    # Add "N" label
    ax.figure.text(x_start, y_start + ax_height * (height + pad), "N",
                   color=color, fontsize=12, fontweight="bold", ha="center")

# --------------------- Colors ---------------------
colors = list(mcolors.TABLEAU_COLORS.values())

# --------------------- Setup Figure ---------------------
fig, ax = plt.subplots(
    figsize=(16, 10),
    subplot_kw={'projection': ccrs.PlateCarree()},
    facecolor='black'
)
ax.set_facecolor('black')

# --------------------- India Boundary ---------------------
IND_Boundary = gpd.read_file("/content/drive/MyDrive/Flight_Route_of_India/IND_Boundary/India_Boundary.shp")
IND_Boundary = IND_Boundary.to_crs(epsg=4326)
IND_Boundary.plot(ax=ax, edgecolor='white', facecolor='none', linewidth=1)

# --------------------- Map Extent ---------------------
min_lon = min(ind_routes_clean['source_long'].min(),
              ind_routes_clean['dest_long'].min()) - 5
max_lon = max(ind_routes_clean['source_long'].max(),
              ind_routes_clean['dest_long'].max()) + 5
min_lat = min(ind_routes_clean['source_lat'].min(),
              ind_routes_clean['dest_lat'].min()) - 5
max_lat = max(ind_routes_clean['source_lat'].max(),
              ind_routes_clean['dest_lat'].max()) + 5

ax.set_extent([min_lon, max_lon, min_lat, max_lat], crs=ccrs.PlateCarree())

# --------------------- Gridlines ---------------------
gl = ax.gridlines(draw_labels=True, linestyle='--', color='gray', alpha=0.5, linewidth=0.8)
gl.top_labels = False
gl.right_labels = False
gl.xlabel_style = {'color': 'white'}
gl.ylabel_style = {'color': 'white'}

# --------------------- Prepare Route Data ---------------------
geod = Geod(ellps='WGS84')
groups = list(ind_routes_clean.groupby('airline'))

route_points = []
legend_info = []

for i, (airline, group) in enumerate(groups):
    color = colors[i % len(colors)]
    legend_info.append((airline, color))
    for _, row in group.iterrows():
        npts = 100
        points = geod.npts(row['source_long'], row['source_lat'],
                            row['dest_long'], row['dest_lat'], npts)
        lons, lats = zip(*points)
        lons = [row['source_long']] + list(lons) + [row['dest_long']]
        lats = [row['source_lat']] + list(lats) + [row['dest_lat']]
        route_points.append((lons, lats, color))

# --------------------- Animation Function ---------------------
def animate(frame):
    ax.clear()
    ax.set_facecolor('black')

    # Plot boundary
    IND_Boundary.plot(ax=ax, edgecolor='white', facecolor='none', linewidth=1)
    ax.set_extent([min_lon, max_lon, min_lat, max_lat], crs=ccrs.PlateCarree())

    # Gridlines
    gl = ax.gridlines(draw_labels=True, linestyle='--', color='gray', alpha=0.5, linewidth=0.8)
    gl.top_labels = False
    gl.right_labels = False
    gl.xlabel_style = {'color': 'white'}
    gl.ylabel_style = {'color': 'white'}

    ax.set_title("Indian Flight Routes", fontsize=20, color='white')

    # Plot routes up to current frame
    for i in range(frame):
        if i >= len(route_points):
            break
        lons, lats, color = route_points[i]
        ax.plot(lons, lats, color=color, linewidth=0.6, alpha=0.7, transform=ccrs.Geodetic())

    # Plot Airports
    ind_airport_sf.plot(
        ax=ax, color='blue', markersize=20, edgecolor='cyan', zorder=5
    )

    # Legend
    handles = [mlines.Line2D([0], [0], color=c, lw=2) for _, c in legend_info]
    labels = [a for a, _ in legend_info]
    handles.append(mlines.Line2D([0], [0], marker='o', color='w', markerfacecolor='blue', markersize=7))
    labels.append("Airports")
    ax.legend(handles, labels, loc='lower left', fontsize=8, facecolor='black', edgecolor='white', labelcolor='white')

    # Add scale bar
    add_scale_bar(ax, length_km=500, location=(0.85, 0.05))

    # Add north arrow
    add_north_arrow(ax, location=(0.95, 0.85))

# --------------------- Run Animation ---------------------
ani = animation.FuncAnimation(fig, animate, frames=len(route_points), interval=200)

# Save Animation
ani.save("/content/drive/MyDrive/Flight_Route_of_India/Indian_Flight_Routes.mp4",
         writer="ffmpeg", dpi=300)

plt.show()